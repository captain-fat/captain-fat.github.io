<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Markdown用法（转载）</title>
    <link href="/2020/02/19/%E9%95%BF%E7%9F%A5%E8%AF%86/arkdown%E7%94%A8%E6%B3%95/"/>
    <url>/2020/02/19/%E9%95%BF%E7%9F%A5%E8%AF%86/arkdown%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Markdown 是一种轻量级的<strong>「标记语言」</strong>，优点在于</p><ul><li><p>专注你的文字内容而不是排版样式。</p></li><li><p>轻松的导出 HTML、PDF 和本身的 .md 文件。</p></li><li><p>纯文本内容，兼容所有的文本编辑器与字处理软件。</p></li><li><p>可读，直观。适合所有人的写作语言。</p><blockquote><p>并且具有以下特点：</p></blockquote></li><li><p>自动生成目录</p></li><li><p>代码块高亮</p></li><li><p>引用展示</p></li><li><p>表格插入</p></li><li><p>图片插入</p></li><li><p>强调显示</p></li><li><p>列表显示</p></li><li><p>自动URL链接  </p></li></ul><blockquote><p>Hexo下使用的MarkDown为Github的GFM，风格很漂亮，简洁美观大方。但是GFM 的MarkDown语法和标准 的MarkDown稍有不同，使用过程中需要注意一些。</p></blockquote><h1 id="语法简明概述"><a href="#语法简明概述" class="headerlink" title="语法简明概述"></a>语法简明概述</h1><p>分段 两个回车<br>换行 两个空格 + 回车<br>标题 # ~ ######，#号的个数表示几级标题，即表示一级标题到六级标题<br>强调 <strong>文字</strong> ， <strong>文字</strong> ， <em>文字</em> ， <em>文字</em> ， <del>文字</del><br>引用 &gt; 注意后面紧跟个空格<br>表格 - 和 | 分割行和列 ， : 控制对其方式<br>代码块 四个空格 开头或， 使用<code>代码内容</code><br>链接 <a href="链接地址">文字</a><br>图片 <img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" srcset="/img/loading.gif" alt="图片说明"> ，地址可以是本地路劲，也可以是网络地址<br>列表 * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><pre><code class="markdown"># 欢迎使用Markdown编辑器写博客   //一级标题 对应 &lt;h1&gt; &lt;/h1&gt;## 标题输入                     //二级标题 对应 &lt;h2&gt; &lt;/h2&gt;### 三级标题                    //三级标题 对应 &lt;h3&gt; &lt;/h3&gt;#### 四级标题                   //四级标题 对应 &lt;h4&gt; &lt;/h4&gt;##### 五级标题                  //五级标题 对应 &lt;h5&gt; &lt;/h5&gt;###### 六级标题                 //六级标题 对应 &lt;h6&gt; &lt;/h6&gt;####### 七级标题                //抱歉，木有了（但是他会影响生成的目录，目录行多出一行空行）二级标题                        //二级标题 对应 &lt;h2&gt; &lt;/h2&gt;----                           //这里添加四个&#39;－&#39; （减号）</code></pre><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><pre><code class="markdown">这是一级标题===这是二级标题---</code></pre><p>该方法仅支持二级标题</p><blockquote><p>这里不做展示了，影响目录的展示。</p></blockquote><h1 id="内容强调"><a href="#内容强调" class="headerlink" title="内容强调"></a>内容强调</h1><h2 id="加粗、斜体"><a href="#加粗、斜体" class="headerlink" title="加粗、斜体"></a>加粗、斜体</h2><pre><code class="markdown">字体 **加粗** 显示字体 *斜体* 显示字体 ***加粗并斜体*** 显示</code></pre><p>字体 <strong>加粗</strong> 显示<br>字体 <em>斜体</em> 显示<br>字体 <strong><em>加粗并斜体</em></strong> 显示</p><pre><code class="markdown">字体 __加粗__ 显示字体 _斜体_ 显示字体 ___加粗并斜体___ 显示组合 *__加粗并斜体__* 显示</code></pre><p>字体 <strong>加粗</strong> 显示<br>字体 <em>斜体</em> 显示<br>字体 <strong><em>加粗并斜体</em></strong> 显示<br>组合 <em><strong>加粗并斜体</strong></em> 显示  </p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><pre><code class="markdown">这样来 ~~删除一段文本~~</code></pre><p>这样来 <del>删除一段文本</del></p><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><pre><code class="markdown">使用&lt;code&gt;\`&lt;/code&gt;来强调字符   //想打出  ` (反引号)需要转义的，加&lt;code&gt;&lt;/code&gt;标签强调  比如`突出背景色`来显示强调效果</code></pre><p>使用<code>`</code>来强调字符<br>比如<code>突出背景色</code>来显示强调效果</p><h2 id="引用显示"><a href="#引用显示" class="headerlink" title="引用显示"></a>引用显示</h2><p>引用过程中任然支持Markdown语法！</p><h3 id="标准使用"><a href="#标准使用" class="headerlink" title="标准使用"></a>标准使用</h3><pre><code class="markdown">&gt; 每行开始都使用 &#39;&gt;&#39;；&gt; 引用**开始**；&gt; 引用**换行**；&gt; 引用**结束**。  &gt; 还在引用中！两个回车结束引用！</code></pre><blockquote><p>每行开始都使用 ‘&gt;’；<br>引用<strong>开始</strong>；<br>引用<strong>换行</strong>；<br>引用<strong>结束</strong>。<br>还在引用中！<br>两个回车结束引用！</p></blockquote><h3 id="省略使用"><a href="#省略使用" class="headerlink" title="省略使用"></a>省略使用</h3><pre><code class="markdown">&gt; 仅第一行加应用；引用**开始**；引用**换行**；引用**结束**；两个回车结束引用,不在引用范围内了！</code></pre><blockquote><p>仅第一行加应用；<br>引用<strong>开始</strong>；<br>引用<strong>换行</strong>；<br>引用<strong>结束</strong>；  </p></blockquote><p>两个回车结束引用,不在引用范围内了！</p><h3 id="嵌套使用"><a href="#嵌套使用" class="headerlink" title="嵌套使用"></a>嵌套使用</h3><pre><code class="markdown">&gt; 动物&gt;&gt; 水生动物&gt;&gt; 陆生动物&gt;&gt;&gt; 猴子&gt;&gt;&gt; 人&gt;&gt;&gt;&gt; 程序猿&gt;&gt;&gt;&gt; 攻城狮&gt;&gt;产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记&gt;&gt; 两栖类动物&gt;&gt;&gt; 大鳄鱼唐老鸭两个回车结束引用,不在引用范围内了！</code></pre><blockquote><p>动物</p><blockquote><p>水生动物<br>陆生动物</p><blockquote><p>猴子<br>人</p><blockquote><p>程序猿<br>攻城狮<br>产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记<br>射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记<br>两栖类动物<br>大鳄鱼<br>唐老鸭<br>两个回车结束引用,不在引用范围内了！</p></blockquote></blockquote></blockquote></blockquote><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>表格语法：</p><pre><code class="markdown">列1   | 列2 | 列3 ----- | --- | ---- 第1行 | 12  | 13  第2行 | 22  | 23  第3行 | 32  | 33</code></pre><table><thead><tr><th>列1</th><th>列2</th><th>列3</th></tr></thead><tbody><tr><td>第1行</td><td>12</td><td>13</td></tr><tr><td>第2行</td><td>22</td><td>23</td></tr><tr><td>第3行</td><td>32</td><td>33</td></tr></tbody></table><p>可以使用冒号来定义对齐方式：</p><pre><code class="markdown">| 左对齐    |  右对齐 | 居中 || :-------- | -------:| :--: || Computer  | 5000 元 |  1台 || Phone     | 1999 元 |  1部 |</code></pre><table><thead><tr><th align="left">左对齐</th><th align="right">右对齐</th><th align="center">居中</th></tr></thead><tbody><tr><td align="left">Computer</td><td align="right">5000 元</td><td align="center">1台</td></tr><tr><td align="left">Phone</td><td align="right">1999 元</td><td align="center">1部</td></tr></tbody></table><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><p>代码块语法遵循标准 markdown 代码，使用 <code>开始，</code> 结束，例如：</p><pre><code class="Python">#!/usr/bin/env python# -*- coding: utf-8 -*-print &#39;Hello World!</code></pre><pre><code>以上代码框及代码输入内容</code></pre><pre><code class="python">#!/usr/bin/env python# -*- coding: utf-8 -*-print &#39;Hello World!&#39;</code></pre><h2 id="特别提示"><a href="#特别提示" class="headerlink" title="特别提示"></a>特别提示</h2><p>如何在代码块中打出 ```</p><pre><code class="markdown">    ````    ```    复制到你的`markdown`中看看去吧！    ```    ````</code></pre><p>实际上是使用 4个<code>包含 3个</code> 就可以了，想表示更多，最外层+1就好了。</p><pre><code class="markdown">    ````    ```    ```    ````</code></pre><h1 id="链接插入"><a href="#链接插入" class="headerlink" title="链接插入"></a>链接插入</h1><pre><code class="markdown">[首页](http://yifan.press)[我的信息](/about/)</code></pre><p><a href="http://yifan.press">首页</a><br><a href="/about/">我的信息</a></p><p>图片插入</p><pre><code class="markdown">![我的头像](http://yifan.press/img/avatar.png)![我的头像](images/avatar.png)</code></pre><p><img src="https//yifan.press/img/avatar.png" srcset="/img/loading.gif" alt="我的头像"><br><img src="/images/avatar.png" srcset="/img/loading.gif" alt="我的头像"></p><h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><pre><code class="markdown">***---</code></pre><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><pre><code class="markdown">* `*`列表展示* `*`列表展示 * `*`列表展示+ `+`列表展示+ `+`列表展示 + `+`列表展示- `-`列表展示- `-`列表展示 - `-`列表展示</code></pre><ul><li><code>*</code>列表展示</li><li><code>*</code>列表展示<ul><li><code>*</code>列表展示</li></ul></li></ul><ul><li><code>+</code>列表展示</li><li><code>+</code>列表展示<ul><li><code>+</code>列表展示</li></ul></li></ul><ul><li><code>-</code>列表展示</li><li><code>-</code>列表展示<ul><li><code>-</code>列表展示</li></ul></li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>这种方式不用手动设置序号，自动生成列表序列</p><pre><code class="markdown">1. **我是一级序列** 1. **我是一级序列** 1. **我是一级序列**  1. *我是二级序列*  1. *我是二级序列*  1. *我是二级序列* 1. **我是一级序列** 1. **我是一级序列**  1. *我是二级序列*  1. *我是二级序列*   1. 还是二级序列，没有三级序列\</code></pre><ol><li><strong>我是一级序列</strong> </li><li><strong>我是一级序列</strong> </li><li><strong>我是一级序列</strong> <ol><li><em>我是二级序列</em> </li><li><em>我是二级序列</em> </li><li><em>我是二级序列</em> </li></ol></li><li><strong>我是一级序列</strong> </li><li><strong>我是一级序列</strong> <ol><li><em>我是二级序列</em> </li><li><em>我是二级序列</em> </li><li>还是二级序列，没有三级序列\序列一个空格，但是任然是二级序列</li></ol></li></ol><h1 id="链接自动检测"><a href="#链接自动检测" class="headerlink" title="链接自动检测"></a>链接自动检测</h1><pre><code class="markdown">首页:http://yifan.press我的信息:http://yifan.press/about/</code></pre><p>首页:<a href="http://yifan.press">http://yifan.press</a><br>我的信息:<a href="http://yifan.press/about/">http://yifan.press/about/</a></p><h1 id="特殊符号处理"><a href="#特殊符号处理" class="headerlink" title="特殊符号处理"></a>特殊符号处理</h1><pre><code class="markdown">\   反斜线`   反引号*   星号_   底线{}  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre><blockquote><p>本文作者： zhuzhuxia<br>本文链接： <a href="https://www.ofind.cn/blog/HEXO/HEXO下的Markdown语法(GFM)写博客.html" target="_blank" rel="noopener">https://www.ofind.cn/blog/HEXO/HEXO下的Markdown语法(GFM)写博客.html</a><br>温馨提示： 由于原创文章，会经常更新知识点以及修正一些错误，因此转载请保留原出处，方便溯源，避免陈旧错误知识的误导，同时有更好的阅读体验。  </p></blockquote><blockquote><p>感谢：<a href="https://www.jianshu.com/p/335db5716248" target="_blank" rel="noopener">https://www.jianshu.com/p/335db5716248</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>长知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫-get请求示例</title>
    <link href="/2020/02/19/%E9%95%BF%E7%9F%A5%E8%AF%86/%E7%88%AC%E8%99%AB-get%E8%AF%B7%E6%B1%82%E7%A4%BA%E4%BE%8B/"/>
    <url>/2020/02/19/%E9%95%BF%E7%9F%A5%E8%AF%86/%E7%88%AC%E8%99%AB-get%E8%AF%B7%E6%B1%82%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>GET请求一般用于我们向服务器查询的过程，比如说，百度搜索“宁哥的小站”，如图所示，浏览器的url会跳转成如图所示</p><p><img src="/images/pasted-0.png" srcset="/img/loading.gif" alt="图像1"></p><p>在其中我们可以看到在”<a href="http://www.baidu.com/s?”" target="_blank" rel="noopener">http://www.baidu.com/s?”</a> 之后出现一个长长的字符串，其中就包含我们要查询的关键词。那么，我们在编程过程中，如何配置这段字符串参数呢？</p><p>在Chrome浏览器中，我们可以看到，请求的数据包含在请求头的Query String Parameters中，其实我们可以将这些字段都写在程序中，也可以摘取其中必要的部分，而不是全部。</p><p><img src="/images/pasted-1.png" srcset="/img/loading.gif" alt="图像2"></p><p>比较关键的是wd字段，这里我们只是把wd字段提取出来，写成词典，然后通过程序编码，配置成GET请求的url，再通过一般的程序抓取手段，可以得到我们查询的页面。程序如下：</p><p>  <strong><em>urllib有些用法变了，更新了下(2020/2/19)</em></strong></p><pre><code class="python">import urlliburl = &quot;http://www.baidu.com/s&quot;data = {    &#39;wd&#39;: &quot;测试&quot;}data = urllib.parse.urlencode(data) #编码工作，由dict转成stringfull_url = url + &#39;?&#39; + data #Get请求发送print(full_url)response = urllib.request.urlopen(full_url)print(response.read())</code></pre><p>转载请注明：宁哥的小站 » 3. 网络爬虫-GET请求示例</p>]]></content>
    
    
    <categories>
      
      <category>长知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>巴意行</title>
    <link href="/2020/02/17/%E5%B7%B4%E6%84%8F%E8%A1%8C/"/>
    <url>/2020/02/17/%E5%B7%B4%E6%84%8F%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please.." data-whm="Sorry, wrong hash."><div class="hbe-input-container"><input type="password" id="hbePass" placeholder="Hey, password is required here." /><label>Hey, password is required here.</label><div class="bottom-line"></div></div><script id="hbeData" type="hbeData" data-hmacdigest="3be2431fcdba7d480bcf762626301caf29037b7ec5530fb60df7d0c6e4e9e27b">f2fd406b5d28eb48ecc341e8ed8ec46e6fa5bb41eb4dbadcdaab53489ae1f1364f690a8268b6f97b0ddd89addfc744dd007a212c7d95604e89950e77b7f84df6</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>旅行</category>
      
    </categories>
    
    
    <tags>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2020/02/17/test/"/>
    <url>/2020/02/17/test/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/02/16/hello-world/"/>
    <url>/2020/02/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
